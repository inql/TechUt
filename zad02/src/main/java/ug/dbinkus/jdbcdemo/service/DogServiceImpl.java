package ug.dbinkus.jdbcdemo.service;

import ug.dbinkus.jdbcdemo.domain.Dog;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class DogServiceImpl implements DogService{

    private Connection connection;

    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createTableDog = "CREATE TABLE Dog(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(30) UNIQUE, date_of_birth date, is_vaccinated boolean, weight double, sex varchar(1))";

    private Statement statement;

    private PreparedStatement getAllDogsPreparedStatement;
    private PreparedStatement addDogPreparedStatement;
    private PreparedStatement deleteAllDogsPreparedStatement;

    public DogServiceImpl(){
        try{
           connection = DriverManager.getConnection(url);
           statement = connection.createStatement();

            ResultSet resultSet = connection.getMetaData().getTables(null,null,null,null);
            boolean tableExists = false;
            while (resultSet.next()){
                if("Dog".equalsIgnoreCase(resultSet.getString("table_name"))){
                    tableExists = true;
                    break;
                }
            }
            if(!tableExists){
                statement.executeUpdate(createTableDog);
            }

            addDogPreparedStatement = connection.prepareStatement("INSERT INTO Dog(name,date_of_birth,is_vaccinated,weight,sex) VALUES (?,?,?,?,?)");
            deleteAllDogsPreparedStatement = connection.prepareStatement("DELETE FROM Dog");
            getAllDogsPreparedStatement = connection.prepareStatement("SELECT name,date_of_birth,is_vaccinated,weight,sex FROM DOG");

        }catch (SQLException e){
            e.printStackTrace();
        }
    }

    public void addDog(Dog dog) throws SQLException {
        addDogPreparedStatement.setString(1,dog.getName());
        addDogPreparedStatement.setString(2,dog.getDateOfBirth());
        addDogPreparedStatement.setBoolean(3,dog.isVaccinated());
        addDogPreparedStatement.setDouble(4,dog.getWeight());
        addDogPreparedStatement.setString(5, String.valueOf(dog.getSex()));
        addDogPreparedStatement.executeUpdate();
    }

    //todo: implement method deleteDog
    public void deleteDog(Dog dog) throws SQLException {
        ResultSet resultSet = statement.executeQuery("SELECT id FROM Dog WHERE name="+dog.getName());
        String deleteDogSql = "DELETE FROM Dog WHERE id="+resultSet.getLong("id");
        statement.executeUpdate(deleteDogSql);
    }

    @Override
    public Connection getConnection() {
        return this.connection;
    }

    @Override
    public void clearDogs() {
        try{
            deleteAllDogsPreparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public List<Dog> getAllDogs() throws SQLException {

        List<Dog> dogs = new ArrayList<>();
        ResultSet dogsResultSet = getAllDogsPreparedStatement.executeQuery();
        while(dogsResultSet.next()){
            Dog dog = new Dog(dogsResultSet.getLong("id"), dogsResultSet.getString("name"),
                    dogsResultSet.getString("date_of_birth"),
                    dogsResultSet.getBoolean("is_vaccinated"),
                    dogsResultSet.getDouble("weight"),
                    dogsResultSet.getString("sex").charAt(0));
            dogs.add(dog);

        }
        return dogs;

    }

    @Override
    public void addAllDogs(List<Dog> dogList) {

        try{
            connection.setAutoCommit(false);
            for(Dog dog : dogList){
                addDogPreparedStatement.setString(1,dog.getName());
                addDogPreparedStatement.setString(2,dog.getDateOfBirth());
                addDogPreparedStatement.setBoolean(3,dog.isVaccinated());
                addDogPreparedStatement.setDouble(4,dog.getWeight());
                addDogPreparedStatement.setString(5,String.valueOf(dog.getSex()));
            }
            connection.commit();

        }catch (SQLException e){
            try{
                connection.rollback();
            } catch (SQLException e1) {
                e1.printStackTrace();
            }
        }


    }
}
